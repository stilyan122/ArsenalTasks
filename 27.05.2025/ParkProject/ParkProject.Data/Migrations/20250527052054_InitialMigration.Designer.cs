// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkProject.Data;

#nullable disable

namespace ParkProject.Data.Migrations
{
    [DbContext(typeof(ParkContext))]
    [Migration("20250527052054_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ParkProject.Data.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Condition")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("good")
                        .HasColumnName("condition");

                    b.Property<DateTime>("InstalledOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("installed_on");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("material");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int")
                        .HasColumnName("zone_id");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("facilities", (string)null);
                });

            modelBuilder.Entity("ParkProject.Data.Models.PlantSpecies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsProtected")
                        .HasColumnType("bit")
                        .HasColumnName("is_protected");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("latin_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("LatinName")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("plantspecies", (string)null);
                });

            modelBuilder.Entity("ParkProject.Data.Models.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AreaHa")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("area_ha");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("zones", (string)null);
                });

            modelBuilder.Entity("ParkProject.Data.Models.ZonePlant", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int")
                        .HasColumnName("zone_id");

                    b.Property<int>("PlantId")
                        .HasColumnType("int")
                        .HasColumnName("plant_id");

                    b.Property<string>("Density")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("density");

                    b.HasKey("ZoneId", "PlantId");

                    b.HasIndex("PlantId");

                    b.ToTable("zoneplants", null, t =>
                        {
                            t.HasCheckConstraint("ck_zoneplant_density", "density IN ('rare','medium','common')");
                        });
                });

            modelBuilder.Entity("ParkProject.Data.Models.Facility", b =>
                {
                    b.HasOne("ParkProject.Data.Models.Zone", "Zone")
                        .WithMany("Facilities")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("ParkProject.Data.Models.ZonePlant", b =>
                {
                    b.HasOne("ParkProject.Data.Models.PlantSpecies", "PlantSpecies")
                        .WithMany("ZonePlants")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkProject.Data.Models.Zone", "Zone")
                        .WithMany("ZonePlants")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlantSpecies");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("ParkProject.Data.Models.PlantSpecies", b =>
                {
                    b.Navigation("ZonePlants");
                });

            modelBuilder.Entity("ParkProject.Data.Models.Zone", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("ZonePlants");
                });
#pragma warning restore 612, 618
        }
    }
}
